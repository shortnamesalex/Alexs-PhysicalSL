#BSL Shaders Shader Properties

#Profiles
profile.Low=!AO vcloud_samples=40 !LightShaft !MotionBlur !ShadowColor !ShadowFilter shadowMapResolution=1024 shadowDistance=128.0
profile.Medium=profile.Low ShadowColor vcloud_samples=50 ShadowFilter shadowMapResolution=2048 shadowDistance=256.0 LightShaft
profile.High=profile.Medium AO LightShaft vcloud_samples=70
profile.Ultra=profile.High vcloud_samples=90 MotionBlur shadowMapResolution=3072 shadowDistance=512.0 DOF

#Force Video Settings
clouds=off
dynamicHandLight=true
oldHandLight=false
oldLighting=false
separateAo=true
underwaterOverlay=false
vignette=false

#Disable Frustrum Culling for World Curvature. Remove # fron the line below
#frustum.culling=false

#Video Settings Toggle (not available yet)
sun.enabled=!RoundSunMoon
moon.enabled=!RoundSunMoon

#Screen Setup
screen=<empty> <empty> <profile> About <empty> <empty> [Visual] [PostProcess] [Shadows] [Color] [Sky] [Water] [Terrain] [World]

screen.Visual=<empty> <empty> AO AOStrength LightShaft LightShaftStrength Desaturation DesaturationFactor Reflection RPSupport [Specular] [Normals] BlackOutline PromoOutline LightmapBanding DisableTexture
screen.Specular=<empty> <empty> ReflectTranslucent ReflectRain ReflectSpecular <empty> <empty> <empty> SpecularFormat ReflectRough ReflectPrevious ReflectRainType ReflectAccuracy
screen.Normals=<empty> <empty> RPSPOM POMDepth RPSShadow POMShadowAngle RPSLightmap LightmapDirStrength <empty> <empty> POMQuality POMDistance

screen.PostProcess=<empty> <empty> DOF DOFStrength MotionBlur MotionBlurStrength Bloom BloomStrength LensFlare LensFlareStrength AA Sharpen AutoExposure [ColorGrading] Vignette DirtyLens
screen.ColorGrading=<empty> <empty> ColorGrading <empty> <empty> <empty> [Col1] [Col2] [Col3] [Col4] <empty> <empty> TonemapExposure TonemapWhiteCurve TonemapLowerCurve TonemapUpperCurve Saturation Vibrance
screen.Col1=<empty> <empty> ColR1 ColG1 ColB1 ColS1 <empty> <empty> ColM1 ColC1
screen.Col2=<empty> <empty> ColR2 ColG2 ColB2 ColS2 <empty> <empty> ColM2 ColC2
screen.Col3=<empty> <empty> ColR3 ColG3 ColB3 ColS3 <empty> <empty> ColM3 ColC3
screen.Col4=<empty> <empty> ColR4 ColG4 ColB4 ColS4 <empty> <empty> ColM4

screen.Shadows=<empty> <empty> shadowMapResolution shadowDistance ShadowColor ShadowFilter sunPathRotation SubsurfaceScattering

screen.Color=[LightColor] [TorchColor] [WaterColor] [WeatherColor] [DimensionColor]
screen.LightColor=sunIllum_r sunIllum_g sunIllum_b sunIllum_mult <empty> <empty> moonIllum_r moonIllum_g moonIllum_b moonIllum_mult
screen.TorchColor=<empty> <empty> TorchR TorchG TorchB TorchS
screen.WaterColor=<empty> <empty> WaterR WaterG WaterB WaterS WaterA WaterF <empty> <empty> WaterVanilla
screen.WeatherColor=<empty> <empty> WeatherVaried [WeatherR] <empty> <empty> [WeatherD] [WeatherB] [WeatherC] [WeatherS] [WeatherM]
screen.WeatherR=<empty> <empty> WeatherRR WeatherRG WeatherRB WeatherRS
screen.WeatherC=<empty> <empty> WeatherCR WeatherCG WeatherCB WeatherCS
screen.WeatherD=<empty> <empty> WeatherDR WeatherDG WeatherDB WeatherDS
screen.WeatherB=<empty> <empty> WeatherBR WeatherBG WeatherBB WeatherBS
screen.WeatherS=<empty> <empty> WeatherSR WeatherSG WeatherSB WeatherSS
screen.WeatherM=<empty> <empty> WeatherMR WeatherMG WeatherMB WeatherMS
screen.DimensionColor=<empty> <empty> [NetherColor] [EndColor]
screen.NetherColor=<empty> <empty> NetherR NetherG NetherB NetherS
screen.EndColor=<empty> <empty> EndR EndG EndB EndS

screen.Sky=<empty> <empty> Clouds [Clouds] Stars RoundSunMoon SkyDesaturation SQUARE_CLOUDS <empty> <empty> SkyboxBrightness
screen.Clouds=sqrcloud_depth vcloud_samples vcloud_alt vcloud_depth vcloud_detail vcloud_coverage

screen.Water=<empty> <empty> WaterNormals WaterParallax <empty> <empty> WaterOctave WaterBump WaterLacunarity WaterPersistance WaterSharpness WaterSize WaterSpeed

screen.Terrain=<empty> <empty> WavingGrass WavingCrops WavingPlant WavingTallPlant WavingLeaves WavingVines WavingLilypad WavingFire WavingWater WavingLava

screen.World=<empty> <empty> EmissiveRecolor EmissiveBrightness Weather WeatherOpacity Fog FogRange WorldCurvature WorldCurvatureSize WorldTimeAnimation AnimationSpeed SoftParticle

#Set Sliders
sliders=AOStrength LightShaftStrength DesaturationFactor ReflectAccuracy LightmapDirStrength POMQuality POMDepth POMDistance POMShadowAngle DOFStrength MotionBlurStrength BloomStrength \
 LensFlareStrength Sharpen TonemapExposure TonemapWhiteCurve TonemapLowerCurve TonemapUpperCurve Saturation Vibrance ColR1 ColG1 ColB1 ColS1 ColM1 ColC1 ColR2 ColG2 ColB2 ColS2 ColM2 ColC2 \
 ColR3 ColG3 ColB3 ColS3 ColM3 ColC3 ColR4 ColG4 ColB4 ColS4 ColM4 shadowMapResolution shadowDistance sunPathRotation LightMR LightMG LightMB LightMS LightDR LightDG LightDB LightDS LightAR \
 LightAG LightAB LightAS LightNR LightNG LightNB LightNS SkyMR SkyMG SkyMB SkyMS SkyDR SkyDG SkyDB SkyDS SkyER SkyEG SkyEB SkyES SkyNR SkyNG SkyNB SkyNS TorchR TorchG TorchB TorchS SkyCR \
 SkyCG SkyCB SkyCS WaterR WaterG WaterB WaterS WaterA WaterF WeatherRR WeatherRG WeatherRB WeatherRS WeatherCR WeatherCG WeatherCB WeatherCS WeatherDR WeatherDG WeatherDB WeatherDS WeatherBR \
 WeatherBG WeatherBB WeatherBS WeatherSR WeatherSG WeatherSB WeatherSS WeatherMR WeatherMG WeatherMB WeatherMS NetherR NetherG NetherB NetherS EndR EndG EndB EndS CloudQuality CloudThickness \
 CloudAmount CloudHeight CloudOpacity CloudSpeed CloudBrightness HorizonDistance SkyboxBrightness WaterOctave WaterBump WaterLacunarity WaterPersistance WaterSharpness WaterSize WaterSpeed \
 EmissiveBrightness WeatherOpacity FogRange WorldCurvatureSize AnimationSpeed vcloud_coverage vcloud_samples sunIllum_r sunIllum_g sunIllum_b sunIllum_mult moonIllum_r moonIllum_g moonIllum_b \
 moonIllum_mult vcloud_alt vcloud_depth sqrcloud_depth

screen.Color.columns=1
screen.Clouds.columns=1

#Program Toggle
program.world0/composite1.enabled=LightShaft
program.world1/composite1.enabled=LightShaft
program.world0/composite2.enabled=MotionBlur
program.world-1/composite2.enabled=MotionBlur
program.world1/composite2.enabled=MotionBlur
program.world0/composite3.enabled=DOF
program.world-1/composite3.enabled=DOF
program.world1/composite3.enabled=DOF

program.world0/deferred.enabled=Clouds

#Disable Fast Leaves
alphaTest.gbuffers_terrain=GREATER 0.1

#Allow Low Weather Opacity
alphaTest.gbuffers_weather=GREATER 0.0001

#Enable Beacon Beam Depth
beacon.beam.depth=true

#Custom Texture
texture.composite.depthtex2=tex/dirt.png
texture.noise=tex/noise2D.png
texture.deferred.colortex15=tex/sqrnoise.png

#Custom Time Uniform
variable.float.tAmin=frac(sunAngle - 0.033333333)
variable.float.tAlin=if (tAmin < 0.433333333, tAmin * 1.15384615385, tAmin * 0.882352941176 + 0.117647058824)
variable.float.hA=if (tAlin > 0.5, 1.0, 0.0)
variable.float.tAfrc=frac(tAlin * 2.0)
variable.float.tAfrs=tAfrc*tAfrc*(3.0-2.0*tAfrc)
variable.float.tAmix=if (hA < 0.5, 0.3, -0.1)
uniform.float.timeAngle=(tAfrc * (1.0-tAmix) + tAfrs * tAmix + hA) * 0.5
uniform.float.timeBrightness=max(sin(timeAngle*6.28318530718),0.0)
uniform.float.shadowFade=clamp(1.0 - (abs(abs(sunAngle - 0.5) - 0.25) - 0.23) * 50.0, 0.0, 1.0)

#Custom Biome Uniforms
uniform.float.isCold=smooth(1, if (in(biome, 10, 11, 12, 13, 26, 30, 31, 140, 158), 1, 0), 10, 10)
uniform.float.isDesert=smooth(2, if (in(biome, 2, 17, 130), 1, 0), 10, 10)
uniform.float.isMesa=smooth(3, if (in(biome, 37, 38, 39, 165, 166, 167), 1, 0), 10, 10)
uniform.float.isSwamp=smooth(4, if (in(biome, 6, 134), 1, 0), 10, 10)
uniform.float.isMushroom=smooth(5, if (in(biome, 14, 15), 1, 0), 10, 10)

#My custom custom uniforms
variable.float.upvecNorm    = 1.0 / sqrt((upPosition.x*upPosition.x) + (upPosition.y*upPosition.y) + (upPosition.z*upPosition.z))
uniform.vec3.upvecView      = vec3(upPosition.x*upvecNorm, upPosition.y*upvecNorm, upPosition.z*upvecNorm)
uniform.vec3.upvec          = vec3(0.0, 1.0, 0.0)

variable.float.sunvecNorm   = 1.0 / sqrt((sunPosition.x * sunPosition.x) + (sunPosition.y * sunPosition.y) + (sunPosition.z * sunPosition.z))
variable.float.svecX        = sunPosition.x * sunvecNorm
variable.float.svecY        = sunPosition.y * sunvecNorm
variable.float.svecZ        = sunPosition.z * sunvecNorm
uniform.vec3.sunvecView     = vec3(svecX, svecY, svecZ)
variable.float.sunvecX      = gbufferModelViewInverse.0.0 * sunPosition.x + gbufferModelViewInverse.1.0 * sunPosition.y + gbufferModelViewInverse.2.0 * sunPosition.z
variable.float.sunvecY      = gbufferModelViewInverse.0.1 * sunPosition.x + gbufferModelViewInverse.1.1 * sunPosition.y + gbufferModelViewInverse.2.1 * sunPosition.z
variable.float.sunvecZ      = gbufferModelViewInverse.0.2 * sunPosition.x + gbufferModelViewInverse.1.2 * sunPosition.y + gbufferModelViewInverse.2.2 * sunPosition.z
uniform.vec3.sunvec         = vec3(sunvecX * sunvecNorm, sunvecY * sunvecNorm, sunvecZ * sunvecNorm)

variable.float.moonvecNorm  = 1.0 / sqrt((moonPosition.x * moonPosition.x) + (moonPosition.y * moonPosition.y) + (moonPosition.z * moonPosition.z))
variable.float.mvecX        = moonPosition.x * moonvecNorm
variable.float.mvecY        = moonPosition.y * moonvecNorm
variable.float.mvecZ        = moonPosition.z * moonvecNorm
uniform.vec3.moonvecView    = vec3(mvecX, mvecY, mvecZ)
variable.float.moonvecX     = gbufferModelViewInverse.0.0 * moonPosition.x + gbufferModelViewInverse.1.0 * moonPosition.y + gbufferModelViewInverse.2.0 * moonPosition.z
variable.float.moonvecY     = gbufferModelViewInverse.0.1 * moonPosition.x + gbufferModelViewInverse.1.1 * moonPosition.y + gbufferModelViewInverse.2.1 * moonPosition.z
variable.float.moonvecZ     = gbufferModelViewInverse.0.2 * moonPosition.x + gbufferModelViewInverse.1.2 * moonPosition.y + gbufferModelViewInverse.2.2 * moonPosition.z
uniform.vec3.moonvec        = vec3(moonvecX * moonvecNorm, moonvecY * moonvecNorm, moonvecZ * moonvecNorm)

variable.float.lightvecNorm = 1.0 / sqrt((shadowLightPosition.x * shadowLightPosition.x) + (shadowLightPosition.y * shadowLightPosition.y) + (shadowLightPosition.z * shadowLightPosition.z))
uniform.vec3.lightvecView   = vec3(shadowLightPosition.x * lightvecNorm, shadowLightPosition.y * lightvecNorm, shadowLightPosition.z * lightvecNorm)
variable.float.lightvecX    = gbufferModelViewInverse.0.0 * shadowLightPosition.x + gbufferModelViewInverse.1.0 * shadowLightPosition.y + gbufferModelViewInverse.2.0 * shadowLightPosition.z
variable.float.lightvecY    = gbufferModelViewInverse.0.1 * shadowLightPosition.x + gbufferModelViewInverse.1.1 * shadowLightPosition.y + gbufferModelViewInverse.2.1 * shadowLightPosition.z
variable.float.lightvecZ    = gbufferModelViewInverse.0.2 * shadowLightPosition.x + gbufferModelViewInverse.1.2 * shadowLightPosition.y + gbufferModelViewInverse.2.2 * shadowLightPosition.z
uniform.vec3.lightvec       = vec3(lightvecX * lightvecNorm, lightvecY * lightvecNorm, lightvecZ * lightvecNorm)

variable.bool.cloud_sunlit  = (worldTime>23000 || worldTime<12900)
uniform.int.cloud_sunlight  = if(cloud_sunlit, 1, 0)
uniform.vec3.cloud_lvec     = vec3(if(cloud_sunlit, sunvecX, moonvecX)*sunvecNorm, if(cloud_sunlit, sunvecY, moonvecY)*sunvecNorm, if(cloud_sunlit, sunvecZ, moonvecZ)*sunvecNorm)
uniform.vec3.cloud_lvecView = vec3(if(cloud_sunlit, svecX, mvecX), if(cloud_sunlit, svecY, mvecY), if(cloud_sunlit, svecZ, mvecZ))

uniform.vec2.viewSize = vec2(viewWidth, viewHeight)
uniform.vec2.pixelSize = vec2(1.0 / viewWidth, 1.0 / viewHeight)